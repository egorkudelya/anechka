namespace net::{MESSAGE_NAME}
{{
    void to_json(Json& json, const CoreData& core)
    {{
        {SERIALIZE_SECTION}
    }}

    void from_json(const Json& json, CoreData& core)
    {{
        {DESERIALIZE_SECTION}
    }}

    [[nodiscard]] Json {MESSAGE_NAME}::toJson() const
    {{
        return m_data;
    }}

    void {MESSAGE_NAME}::fromJson(const Json& json)
    {{
        json.get_to(m_data);
    }}

    void {MESSAGE_NAME}::print() const
    {{
       const std::string& src = toJson().dump();
       std::string result;
       for (size_t i = 0; i < src.size(); i++)
       {{
           if (src[i] == '\\' && i + 1 < src.size())
           {{
               switch (src[i + 1])
               {{
                   case 'n': result += '\n'; break;
                   case 't': result += '\t'; break;
                   case '\\':
                   {{
                       if (i + 2 < src.size() && src[i + 2] == 'n')
                       {{
                           continue;
                       }}
                       break;
                   }}
                   default: result += src[i + 1];
               }}
               i++;
           }}
           else if (src[i] == '{{' && (i + 2 < src.size() && src[i + 2] != 'n'))
           {{
               result += "{{\n";
           }}
           else if ((src[i] == '\"' && (i + 1 < src.size() &&
                    (src[i + 1] == '[' || src[i + 1] == '{{'))))
           {{
                result += src[i + 1];
                i++;
           }}
           else if ((src[i] == '}}' || src[i] == ']') &&
                    i + 1 < src.size() && src[i + 1] == '\"')
           {{
                result += src[i];
                i++;
           }}
           else
           {{
               result += src[i];
           }}
       }}
        std::cout << result << '\n';
    }}

    {SOURCE_GETTER_SECTION}
}}